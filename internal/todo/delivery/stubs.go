// Package delivery provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package delivery

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TodoStatus.
const (
	TodoStatusCompleted TodoStatus = "completed"
	TodoStatusPending   TodoStatus = "pending"
)

// Defines values for UpdateTodoStatus.
const (
	UpdateTodoStatusCompleted UpdateTodoStatus = "completed"
	UpdateTodoStatusPending   UpdateTodoStatus = "pending"
)

// Defines values for GetTodosParamsStatus.
const (
	Completed GetTodosParamsStatus = "completed"
	Pending   GetTodosParamsStatus = "pending"
)

// CreateTodo defines model for CreateTodo.
type CreateTodo struct {
	// Description Подробное описание задачи
	Description *string `json:"description,omitempty"`

	// Title Заголовок задачи
	Title string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	// Code Код ошибки
	Code int `json:"code"`

	// Message Сообщение об ошибке
	Message string `json:"message"`
}

// Todo defines model for Todo.
type Todo struct {
	// CreatedAt Дата и время создания задачи
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description Подробное описание задачи
	Description *string `json:"description,omitempty"`

	// Id Уникальный идентификатор задачи
	Id *string `json:"id,omitempty"`

	// Status Статус задачи
	Status *TodoStatus `json:"status,omitempty"`

	// Title Заголовок задачи
	Title *string `json:"title,omitempty"`

	// UpdatedAt Дата и время последнего обновления задачи
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// TodoStatus Статус задачи
type TodoStatus string

// UpdateTodo defines model for UpdateTodo.
type UpdateTodo struct {
	// Description Новое описание задачи
	Description *string `json:"description,omitempty"`

	// Status Новый статус задачи
	Status *UpdateTodoStatus `json:"status,omitempty"`

	// Title Новый заголовок задачи
	Title *string `json:"title,omitempty"`
}

// UpdateTodoStatus Новый статус задачи
type UpdateTodoStatus string

// GetTodosParams defines parameters for GetTodos.
type GetTodosParams struct {
	// Status Фильтрация задач по статусу (`completed`, `pending`).
	Status *GetTodosParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Search Фильтрация задач по ключевым словам в заголовке или описании.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetTodosParamsStatus defines parameters for GetTodos.
type GetTodosParamsStatus string

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = CreateTodo

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody = UpdateTodo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список задач
	// (GET /todos)
	GetTodos(ctx echo.Context, params GetTodosParams) error
	// Создать новую задачу
	// (POST /todos)
	CreateTodo(ctx echo.Context) error
	// Удалить задачу
	// (DELETE /todos/{id})
	DeleteTodo(ctx echo.Context, id string) error
	// Получить задачу по ID
	// (GET /todos/{id})
	GetTodoById(ctx echo.Context, id string) error
	// Обновить задачу
	// (PATCH /todos/{id})
	UpdateTodo(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodosParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx, params)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodo(ctx, id)
	return err
}

// GetTodoById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodoById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodoById(ctx, id)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTodo(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/todos/:id", wrapper.DeleteTodo)
	router.GET(baseURL+"/todos/:id", wrapper.GetTodoById)
	router.PATCH(baseURL+"/todos/:id", wrapper.UpdateTodo)

}
